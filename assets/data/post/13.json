{"title":"NestJS에서 MongoDB 사용하기 (with Mongoose)","description":"NestJS에서 MongoDB 사용을 위한 기본 설정","keywords":["JavaScript","TypeScript","NodeJS","NestJS","Mongoose","MongoDB"],"tags":["JavaScript","TypeScript","NodeJS","NestJS","Mongoose","MongoDB"],"banner":"/assets/images/posts/13/banner.png","thumbnail":"/assets/images/posts/13/thumbnail.png","bannerCredit":{"name":"Kevin Ku","id":"@ikukevk"},"publish":"2022-06-14 12:19:00","id":"13","contents":"최근에 [구름IDE](https://ide.goorm.io/)에서 사용할 백엔드를 개발하는데\r\n[NestJS](https://docs.nestjs.com/)와 [MongoDB](https://www.mongodb.com/)를 이용해보았다.\r\n평소 같으면 PostgreSQL로 데이터베이스를 구축했을텐데 구름IDE 기본 제공 데이터베이스에 MySQL과  MongoDB 뿐이었고,\r\n조만간 MongoDB를 이용한 개발 일을 하게될 수도 있어서 공부도 할 겸 MongoDB로 데이터베이스를 구축했다.\r\n\r\nNestJS에서 MongoDB를 사용하는 방법은 [공식 문서](https://docs.nestjs.com/techniques/mongodb)에 잘 나와있지만 한 번 더 정리해보자.\r\n\r\n# NestJS Mongoose 설치\r\n\r\n아래 명령어로 `@nestjs/mongoose`와 `mongoose` 패키지를 설치하자.\r\n\r\n```bash\r\nnpm i @nestjs/mongoose mongoose\r\n```\r\n\r\n# MongoDB 데이터베이스 연결\r\n\r\n설치하고 나면 데이터베이스를 사용할 NestJS 모듈에 `MongooseModule`을 임포트 해준다.\r\n\r\n```typescript\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forRoot('mongodb://localhost/nest')],\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\n이렇게 하면 `mongodb://localhost/nest` 라는 데이터베이스에 대한 `Connection`을 생성한다.\r\n생성된 Connection은 DI를 이용해 서비스나 컨트롤러에 주입할 수 있다.\r\n\r\n```typescript\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectConnection } from '@nestjs/mongoose';\r\nimport { Connection } from 'mongoose';\r\n\r\n@Injectable()\r\nexport class DatabaseService {\r\n  constructor(@InjectConnection() private connection: Connection) {}\r\n}\r\n```\r\n\r\n하지만 직접 사용해 본 결과, Connection을 사용할 일은 transaction을 할 때 말곤 딱히 없었다.\r\n\r\n`MongooseModule.forRoot()` 메서드를 이용해 MongoDB에 연결하기 위해 아래와 같은 방법들도 가능하다.\r\n\r\n```typescript\r\nMongooseModule.forRoot('mongodb://{username}:{password}@localhost/nest?options...');\r\n```\r\n\r\n```typescript\r\nMongooseModule.forRoot('mongodb://localhost/nest', {\r\n  user: '{username}',\r\n  pass: '{password}',\r\n  // and other options...\r\n});\r\n```\r\n\r\n# Mongoose Schema 정의\r\n\r\n다음은 데이터베이스 Model을 정의하는 방법이다. 아래는 공식 문서에 나온 Model 정의 방법이다.\r\n\r\n```typescript\r\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type CatDocument = Cat & Document;\r\n\r\n@Schema()\r\nexport class Cat {\r\n  @Prop()\r\n  name: string;\r\n\r\n  @Prop()\r\n  age: number;\r\n\r\n  @Prop()\r\n  breed: string;\r\n}\r\n\r\nexport const CatSchema = SchemaFactory.createForClass(Cat);\r\n```\r\n\r\n`@Schema()` 데코레이터로 Schema를 정의하고, `@Prop()` 데코레이터로 Model의 각 필드를 정의한다.\r\nMongoDB에서는 테이블을 **Collection**, 테이블 안에 있는 데이터를 **Document**라고 부르는데 Schema는\r\nCollection과 정의된 Model을 이어주는 역할을 한다.\r\n\r\n그런데 이 `@nestjs/mongoose` 패키지는 다른 ORM 패키지들과 다른 불편함을 가지고 있다.\r\n바로 해당 Model의 Document에 대한 타입과 Schema를 별도로 정의해줘야 한다는 점이다.\r\nTypeORM과 비교를 하자면 Entity만 정의하면 간단하게 모든게 설정되는 것과는 달리 추가적인 노력이 들어가줘야 되는 것이다.\r\n\r\n이 불편함 때문에 TypeORM을 써보려고도 했는데, TypeORM + MongoDB는 공식 문서도 없고\r\n찾아보니 TypeORM이 MongoDB 버전 4부터는 지원하지 않는다는 글이 있어서 그냥 `@nestjs/mongoose` 패키지를 사용했다.\r\n\r\n어쨌든 이렇게 정의한 Model은 `MongooseModule.forFeature()` 메서드를 이용해\r\n특정 모듈에서 사용하도록 만들 수 있다.\r\n\r\n```typescript\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CatsController } from './cats.controller';\r\nimport { CatsService } from './cats.service';\r\nimport { Cat, CatSchema } from './schemas/cat.schema';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }])],\r\n  controllers: [CatsController],\r\n  providers: [CatsService],\r\n})\r\nexport class CatsModule {}\r\n```\r\n\r\n그럼 이제 데이터베이스에 연결할 경우 `cat` 이라는 이름의 Collection이 없으면 자동으로 생성된다.\r\n\r\n생성된 Model은 DI를 이용해 서비스나 컨트롤러에 주입할 수 있다.\r\n\r\n```typescript\r\nimport { Model } from 'mongoose';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Cat, CatDocument } from './schemas/cat.schema';\r\n\r\n@Injectable()\r\nexport class CatsService {\r\n  constructor(@InjectModel(Cat.name) private catModel: Model<CatDocument>) {}\r\n}\r\n```\r\n\r\n# 여러 개의 데이터베이스 연결\r\n\r\n`@nestjs/mongoose` 는 여러 데이터베이스에 대한 Connection을 생성할 수 있는데, 그 방법은 간단하다.\r\n`MongooseModule.forRoot()`를 여러 개 사용하면 된다.\r\n\r\n단, 이 때 옵션에 `connectionName`을 설정해줘야 한다.\r\n\r\n```typescript\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forRoot('mongodb://localhost/test', {\r\n      connectionName: 'cats',\r\n    }),\r\n    MongooseModule.forRoot('mongodb://localhost/users', {\r\n      connectionName: 'users',\r\n    }),\r\n  ],\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\n이렇게만 하면 기존의 `CatsService`에 있던 `catModel`에서 에러가 난다.\r\n데이터베이스 Connection이 여러 개인데 어디에서 `catModel`을 가져와야 할 지 모르기 때문이다.\r\n\r\n따라서 `CatsModule`과 `CatsService`를 아래와 같이 바꿔준다.\r\n\r\n```typescript\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { CatsController } from './cats.controller';\r\nimport { CatsService } from './cats.service';\r\nimport { Cat, CatSchema } from './schemas/cat.schema';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }], 'cats')],\r\n  controllers: [CatsController],\r\n  providers: [CatsService],\r\n})\r\nexport class CatsModule {}\r\n```\r\n\r\n```typescript\r\nimport { Model } from 'mongoose';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Cat, CatDocument } from './schemas/cat.schema';\r\n\r\n@Injectable()\r\nexport class CatsService {\r\n  constructor(@InjectModel(Cat.name, 'cats') private catModel: Model<CatDocument>) {}\r\n}\r\n```\r\n\r\n만약 Connection을 DI를 통해 사용한다면 Connection에도 `connectionName`을 지정해줘야 한다.\r\n\r\n```typescript\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectConnection } from '@nestjs/mongoose';\r\nimport { Connection } from 'mongoose';\r\n\r\n@Injectable()\r\nexport class CatsService {\r\n  constructor(@InjectConnection('cats') private connection: Connection) {}\r\n}\r\n```\r\n\r\n# 마무리\r\n\r\n오늘 포스팅은 여기서 끝!\r\n앞으로 한동안은 NestJS + MongoDB에 관한 글을 올릴 예정이다.\r\n\r\n공식 문서가 모든 기능을 다 담아서 정리해둔 게 아니라 처음 개발을 진행할 때\r\n알 수 없는 에러에도 많이 봉착하고 여간 헤맨 게 아니었는데\r\n다른 사람들은 이 글을 보고 적어도 덜 헤맸으면 좋겠다.\r\n","created":"2022-06-14 12:19:00"}